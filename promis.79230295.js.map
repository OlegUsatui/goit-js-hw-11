{"version":3,"sources":["js/promis.js"],"names":["delay","ms","Promise","resolve","setTimeout","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","username","reject","map","user","table","catch","randomIntegerFromInterval","min","max","Math","floor","random","makeTransaction","transaction","id","logSuccess","logError","warn","amount"],"mappings":";AAEA,SAASA,EAAMC,GACJ,OAAA,IAAIC,QAASC,IAChBC,WAAW,KACPD,EAAQF,IACTA,KAMX,MAAMI,EAASC,GAAQC,QAAQC,uBAAuBF,OAItDN,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,MAAMS,KAAKJ,GAMjB,MAAMK,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,IAGpBC,EAAkB,CAACC,EAAUC,IACxB,IAAIb,QAAQ,CAACC,EAASa,KACzBF,EAASG,IAAIC,IACLA,EAAKP,OAASI,EACdZ,EAAQ,IAAKe,EAAMN,QAASM,EAAKN,SAEjCI,EAAOE,OAavBL,EAAgBH,EAAO,SAASD,KAAKF,QAAQY,OAC7CN,EAAgBH,EAAO,QAAQD,KAAKF,QAAQY,OAAOC,MAAMb,QAAQY,OAMjE,MAAME,EAA4B,CAACC,EAAKC,IAC/BC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,GAGhDK,EAAmBC,IACjB5B,MAAAA,EAAQqB,EAA0B,IAAK,KAEpC,OAAA,IAAInB,QAAQ,CAACC,EAASa,KACvBZ,WAAW,KACEoB,KAAKE,SAAW,GAGjCvB,EAAQ,CAAE0B,GAAID,EAAYC,GAAIvB,KAAMN,IAEpCgB,EAAOY,EAAYC,KAEpB7B,MAKC8B,EAAa,EAAGD,GAAAA,EAAIvB,KAAAA,MACxBC,QAAQC,mBAAmBqB,kBAAmBvB,QAG1CyB,EAAWF,IACftB,QAAQyB,qCAAqCH,+BAQ/CF,EAAgB,CAAEE,GAAI,GAAII,OAAQ,MAAOxB,KAAKqB,GAAYV,MAAMW,GAChEJ,EAAgB,CAAEE,GAAI,GAAII,OAAQ,MAAOxB,KAAKqB,GAAYV,MAAMW","file":"promis.79230295.js","sourceRoot":"../src","sourcesContent":["// // Задание 1\n\nfunction delay(ms) {\n    return new Promise((resolve) => {\n        setTimeout(() => {\n            resolve(ms)\n        }, ms)\n    })\n\n    \n};\n\nconst logger = time => console.log(`Fulfilled after ${time}ms`);\n\n\n// Tests\ndelay(2000).then(logger); // Fulfilled after 2000ms\ndelay(1000).then(logger); // Fulfilled after 1000ms\ndelay(1500).then(logger); // Fulfilled after 1500ms\n\n// ===============================================================================\n\n// Задание 2\n\nconst users = [\n  { name: 'Mango', active: true },\n  { name: 'Poly', active: false },\n  { name: 'Ajax', active: false },\n];\n\nconst toggleUserState = (allUsers, username) => {\n    return new Promise((resolve, reject) => {\n        allUsers.map(user => {\n            if (user.name === username) {\n                resolve({ ...user, active: !user.active })\n            } else {\n                reject(user)\n            }\n        })\n    })\n\n\n};\n\n// Currently the function works like this\n// toggleUserState(users, 'Mango', console.table);\n// toggleUserState(users, 'Ajax', console.table);\n\n// The function should work like this\ntoggleUserState(users, 'Mango').then(console.table);\ntoggleUserState(users, 'Ajax').then(console.table).catch(console.table);\n\n// ================================================================================\n\n// Задание 3\n\nconst randomIntegerFromInterval = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst makeTransaction = (transaction) => {\n  const delay = randomIntegerFromInterval(200, 500);\n\n    return new Promise((resolve, reject) => {\n          setTimeout(() => {\n    const canProcess = Math.random() > 0.3;\n\n    if (canProcess) {\n      resolve({ id: transaction.id, time: delay });\n    } else {\n      reject(transaction.id);\n    }\n  }, delay);\n    })\n\n};\n\nconst logSuccess = ({ id, time }) => {\n  console.log(`Transaction ${id} processed in ${time}ms`);\n};\n\nconst logError = id => {\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\n};\n\n// Currently the function works like this\n// makeTransaction({ id: 70, amount: 150 }, logSuccess, logError);\n// makeTransaction({ id: 71, amount: 230 }, logSuccess, logError);\n\n// The function should work like this\nmakeTransaction({ id: 70, amount: 150 }).then(logSuccess).catch(logError);\nmakeTransaction({ id: 71, amount: 230 }).then(logSuccess).catch(logError);"]}